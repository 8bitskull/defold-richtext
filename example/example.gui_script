local richtext = require "richtext.richtext"



local function create_complex_example()
	local settings = {
		fonts = {
			Roboto = {
				regular = hash("Roboto-Regular"),
				italic = hash("Roboto-Italic"),
				bold = hash("Roboto-Bold"),
				bold_italic = hash("Roboto-BoldItalic"),
			},
			Nanum = {
				regular = hash("Nanum-Regular"),
			},
		},
		width = 400,
		position = vmath.vector3(0, 0, 0),
		parent = gui.get_node("bg"),
		color = vmath.vector4(0.95, 0.95, 1.0, 1.0),
		align = richtext.ALIGN_LEFT
	}
	local text = "<size=3>RichText</size>Lorem <color=0,0.5,0,1>ipsum </color><img=smileys:zombie/> dolor <color=red>sit </color><color=#ff00ffff>amet, </color><size=1.15><font=Nanum>consectetur </font></size>adipiscing elit.<br/><b>Nunc </b>tincidunt <b><i>mattis</i> libero</b> <i>non viverra</i>.\n\nNullam ornare <img=smileys:hungry></img>accumsan rhoncus.\n\n<size=0.5>Nunc placerat nibh a purus auctor, id scelerisque massa</size> <size=2>rutrum.</size>"
	local words, metrics = richtext.create(text, "Roboto", settings)

	print("The text consists of " .. tostring(metrics.char_count) .. " characters")

	-- adjust background to cover text
	gui.set_size(settings.parent, vmath.vector3(metrics.width, metrics.height, 0))

	-- get all bold words and animate them
	local bold_words = richtext.tagged(words, "b")
	for _,bold_word in pairs(bold_words) do
		local pos = gui.get_position(bold_word.node)
		gui.animate(bold_word.node, gui.PROP_POSITION, pos + vmath.vector3(0, 4, 0), gui.EASING_INOUTQUAD, 4, ((pos.x * pos.y) % 10) / 10, nil, gui.PLAYBACK_LOOP_PINGPONG)
	end
end


local function create_align_example()
	local settings_align_right = { position = vmath.vector3(640, 200, 0), align = richtext.ALIGN_RIGHT }
	richtext.create("Right align this text\nDo it for both lines", "Roboto-Regular", settings_align_right)

	local settings_align_center = { position = vmath.vector3(320, 90, 0), align = richtext.ALIGN_CENTER }
	richtext.create("Center these words around the specified position\nAnd these words as well", "Roboto-Regular", settings_align_center)
end


local function create_truncate_example()
	local settings = { position = vmath.vector3(0, 260, 0) }
	local words, metrics = richtext.create("This text should be shown one <img=smileys:cyclops/> at a time...", "Roboto-Regular", settings)
	local length = 0
	richtext.truncate(words, length)
	timer.repeating(0.1, function()
		length = (length + 1) % (metrics.char_count + 1)
		richtext.truncate(words, length)
	end)
end



local function create_characters_example()
	local settings = { position = vmath.vector3(0, 330, 0) }
	local words, metrics = richtext.create("Our <wave><color=#ff69b4>princess</color></wave> is in another <wave><color=red>castle</color></wave>", "Roboto-Regular", settings)
	
	local waves = richtext.tagged(words, "wave")
	for _,wave in pairs(waves) do
		local chars = richtext.characters(wave)
		gui.delete_node(wave.node)
		for i,char in ipairs(chars) do
			local pos = gui.get_position(char.node)
			gui.animate(char.node, gui.PROP_POSITION, pos + vmath.vector3(0, 15, 0), gui.EASING_INOUTSINE, 2, i * 0.3, nil, gui.PLAYBACK_LOOP_PINGPONG)
		end
	end
end



function init(self)
	create_complex_example()
	create_align_example()
	create_truncate_example()
	create_characters_example()
end
